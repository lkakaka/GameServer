// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/server_only/login_srv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_5fonly_2flogin_5fsrv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_5fonly_2flogin_5fsrv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/login.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fserver_5fonly_2flogin_5fsrv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fserver_5fonly_2flogin_5fsrv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fserver_5fonly_2flogin_5fsrv_2eproto;
class LoadRoleListReq;
class LoadRoleListReqDefaultTypeInternal;
extern LoadRoleListReqDefaultTypeInternal _LoadRoleListReq_default_instance_;
class LoadRoleReq;
class LoadRoleReqDefaultTypeInternal;
extern LoadRoleReqDefaultTypeInternal _LoadRoleReq_default_instance_;
class LoadRoleRsp;
class LoadRoleRspDefaultTypeInternal;
extern LoadRoleRspDefaultTypeInternal _LoadRoleRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LoadRoleListReq* Arena::CreateMaybeMessage<::LoadRoleListReq>(Arena*);
template<> ::LoadRoleReq* Arena::CreateMaybeMessage<::LoadRoleReq>(Arena*);
template<> ::LoadRoleRsp* Arena::CreateMaybeMessage<::LoadRoleRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LoadRoleListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoadRoleListReq) */ {
 public:
  LoadRoleListReq();
  virtual ~LoadRoleListReq();

  LoadRoleListReq(const LoadRoleListReq& from);
  LoadRoleListReq(LoadRoleListReq&& from) noexcept
    : LoadRoleListReq() {
    *this = ::std::move(from);
  }

  inline LoadRoleListReq& operator=(const LoadRoleListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRoleListReq& operator=(LoadRoleListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRoleListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRoleListReq* internal_default_instance() {
    return reinterpret_cast<const LoadRoleListReq*>(
               &_LoadRoleListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadRoleListReq& a, LoadRoleListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRoleListReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRoleListReq* New() const final {
    return CreateMaybeMessage<LoadRoleListReq>(nullptr);
  }

  LoadRoleListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRoleListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRoleListReq& from);
  void MergeFrom(const LoadRoleListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRoleListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoadRoleListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fserver_5fonly_2flogin_5fsrv_2eproto);
    return ::descriptor_table_proto_2fserver_5fonly_2flogin_5fsrv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:LoadRoleListReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fserver_5fonly_2flogin_5fsrv_2eproto;
};
// -------------------------------------------------------------------

class LoadRoleReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoadRoleReq) */ {
 public:
  LoadRoleReq();
  virtual ~LoadRoleReq();

  LoadRoleReq(const LoadRoleReq& from);
  LoadRoleReq(LoadRoleReq&& from) noexcept
    : LoadRoleReq() {
    *this = ::std::move(from);
  }

  inline LoadRoleReq& operator=(const LoadRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRoleReq& operator=(LoadRoleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRoleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRoleReq* internal_default_instance() {
    return reinterpret_cast<const LoadRoleReq*>(
               &_LoadRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadRoleReq& a, LoadRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRoleReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRoleReq* New() const final {
    return CreateMaybeMessage<LoadRoleReq>(nullptr);
  }

  LoadRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRoleReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRoleReq& from);
  void MergeFrom(const LoadRoleReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoadRoleReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fserver_5fonly_2flogin_5fsrv_2eproto);
    return ::descriptor_table_proto_2fserver_5fonly_2flogin_5fsrv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
    kConnIdFieldNumber = 2,
  };
  // int32 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 conn_id = 2;
  void clear_conn_id();
  ::PROTOBUF_NAMESPACE_ID::int32 conn_id() const;
  void set_conn_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:LoadRoleReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fserver_5fonly_2flogin_5fsrv_2eproto;
};
// -------------------------------------------------------------------

class LoadRoleRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoadRoleRsp) */ {
 public:
  LoadRoleRsp();
  virtual ~LoadRoleRsp();

  LoadRoleRsp(const LoadRoleRsp& from);
  LoadRoleRsp(LoadRoleRsp&& from) noexcept
    : LoadRoleRsp() {
    *this = ::std::move(from);
  }

  inline LoadRoleRsp& operator=(const LoadRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRoleRsp& operator=(LoadRoleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRoleRsp* internal_default_instance() {
    return reinterpret_cast<const LoadRoleRsp*>(
               &_LoadRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoadRoleRsp& a, LoadRoleRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRoleRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRoleRsp* New() const final {
    return CreateMaybeMessage<LoadRoleRsp>(nullptr);
  }

  LoadRoleRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRoleRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRoleRsp& from);
  void MergeFrom(const LoadRoleRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRoleRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoadRoleRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fserver_5fonly_2flogin_5fsrv_2eproto);
    return ::descriptor_table_proto_2fserver_5fonly_2flogin_5fsrv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleInfoFieldNumber = 2,
    kConnIdFieldNumber = 1,
  };
  // .RoleInfo role_info = 2;
  bool has_role_info() const;
  void clear_role_info();
  const ::RoleInfo& role_info() const;
  ::RoleInfo* release_role_info();
  ::RoleInfo* mutable_role_info();
  void set_allocated_role_info(::RoleInfo* role_info);

  // int32 conn_id = 1;
  void clear_conn_id();
  ::PROTOBUF_NAMESPACE_ID::int32 conn_id() const;
  void set_conn_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:LoadRoleRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::RoleInfo* role_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fserver_5fonly_2flogin_5fsrv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadRoleListReq

// string account = 1;
inline void LoadRoleListReq::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadRoleListReq::account() const {
  // @@protoc_insertion_point(field_get:LoadRoleListReq.account)
  return account_.GetNoArena();
}
inline void LoadRoleListReq::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoadRoleListReq.account)
}
inline void LoadRoleListReq::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoadRoleListReq.account)
}
inline void LoadRoleListReq::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoadRoleListReq.account)
}
inline void LoadRoleListReq::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoadRoleListReq.account)
}
inline std::string* LoadRoleListReq::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:LoadRoleListReq.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadRoleListReq::release_account() {
  // @@protoc_insertion_point(field_release:LoadRoleListReq.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRoleListReq::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:LoadRoleListReq.account)
}

// -------------------------------------------------------------------

// LoadRoleReq

// int32 role_id = 1;
inline void LoadRoleReq::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadRoleReq::role_id() const {
  // @@protoc_insertion_point(field_get:LoadRoleReq.role_id)
  return role_id_;
}
inline void LoadRoleReq::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:LoadRoleReq.role_id)
}

// int32 conn_id = 2;
inline void LoadRoleReq::clear_conn_id() {
  conn_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadRoleReq::conn_id() const {
  // @@protoc_insertion_point(field_get:LoadRoleReq.conn_id)
  return conn_id_;
}
inline void LoadRoleReq::set_conn_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:LoadRoleReq.conn_id)
}

// -------------------------------------------------------------------

// LoadRoleRsp

// int32 conn_id = 1;
inline void LoadRoleRsp::clear_conn_id() {
  conn_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadRoleRsp::conn_id() const {
  // @@protoc_insertion_point(field_get:LoadRoleRsp.conn_id)
  return conn_id_;
}
inline void LoadRoleRsp::set_conn_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:LoadRoleRsp.conn_id)
}

// .RoleInfo role_info = 2;
inline bool LoadRoleRsp::has_role_info() const {
  return this != internal_default_instance() && role_info_ != nullptr;
}
inline const ::RoleInfo& LoadRoleRsp::role_info() const {
  const ::RoleInfo* p = role_info_;
  // @@protoc_insertion_point(field_get:LoadRoleRsp.role_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::RoleInfo*>(
      &::_RoleInfo_default_instance_);
}
inline ::RoleInfo* LoadRoleRsp::release_role_info() {
  // @@protoc_insertion_point(field_release:LoadRoleRsp.role_info)
  
  ::RoleInfo* temp = role_info_;
  role_info_ = nullptr;
  return temp;
}
inline ::RoleInfo* LoadRoleRsp::mutable_role_info() {
  
  if (role_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoleInfo>(GetArenaNoVirtual());
    role_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LoadRoleRsp.role_info)
  return role_info_;
}
inline void LoadRoleRsp::set_allocated_role_info(::RoleInfo* role_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_info_);
  }
  if (role_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      role_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_info, submessage_arena);
    }
    
  } else {
    
  }
  role_info_ = role_info;
  // @@protoc_insertion_point(field_set_allocated:LoadRoleRsp.role_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_5fonly_2flogin_5fsrv_2eproto
