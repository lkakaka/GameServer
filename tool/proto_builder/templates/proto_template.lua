
-- Generated by tool.  DO NOT EDIT!
require("util.logger")
pb = require("pb") -- 载入 pb.dll

{% for file_name in render_obj.proto_files %}
assert(pb.loadfile("../script/lua/proto/{{ file_name }}.pb")) -- 载入pb文件
{% endfor %}

{% for proto_obj in render_obj.proto_list %}
{{ proto_obj.msg_id_var }} = {{ proto_obj.msg_id }}
{% endfor %}

MSG_ID_TO_NAME = {
{% for proto_obj in render_obj.proto_list %}
	[{{ proto_obj.msg_id }}] = "{{ proto_obj.proto_name }}",
{% endfor %}
}

MSG_NAME_TO_ID = {
{% for proto_obj in render_obj.proto_list %}
	{{ proto_obj.proto_name }} = {{ proto_obj.msg_id }},
{% endfor %}
}

{% for proto_obj in render_obj.proto_list %}
local function decode{{ proto_obj.proto_name }}(msg)
	return pb.decode("{{ proto_obj.proto_name }}", msg)
end

{% endfor %}	

local decodeFunc = {
{% for proto_obj in render_obj.proto_list %}
	[{{ proto_obj.msg_id }}] = decode{{ proto_obj.proto_name }},
{% endfor %}
}

{% for proto_obj in render_obj.proto_list %}
local function encode{{ proto_obj.proto_name }}(msg)
	return pb.encode("{{ proto_obj.proto_name }}", msg)
end

{% endfor %}	

local encodeFunc = {
{% for proto_obj in render_obj.proto_list %}
	[{{ proto_obj.msg_id }}] = encode{{ proto_obj.proto_name }},
{% endfor %}
}

function decodeMsg(msgId, msg)
	local func = decodeFunc[msgId]
	if func == nil then
		logger.logError("decode unkown msgId:" .. msgId)
		return
	end
	return func(msg);
end

function encodeMsg(msgId, msg)
	local func = encodeFunc[msgId]
	if func == nil then
		logger.logError("encode unkown msgId:" .. msgId)
		return
	end
	return func(msg);
end
